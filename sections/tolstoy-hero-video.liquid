{% assign publishId = section.settings.publishId %}

{% assign linkNamespace = "tolstoy-hero-link" %}
{% assign isLiveNamespace = "tolstoy-hero-is-live" %}
{% assign desktopNamespace = "tolstoy-hero-desktop" %}
{% assign mobileNamespace = "tolstoy-hero-mobile" %}
{% assign linkKey = "link-" | append: publishId %}
{% assign isOpenInNewTabKey = "is-new-tab-" | append: publishId %}
{% assign videoKey = "video-" | append: publishId %}
{% assign posterKey = "poster-" | append: publishId %}
{% assign aspectRatioKey = "aspect-ratio-" | append: publishId %}
{% assign isLiveKey = "is-live-" | append: publishId %}

{% assign videoLink = shop.metafields[linkNamespace][linkKey] %}
{% assign isLive = shop.metafields[isLiveNamespace][isLiveKey] %}
{% assign isOpenInNewTab = shop.metafields[linkNamespace][isOpenInNewTabKey] %}
{% assign desktopVideoSrc = shop.metafields[desktopNamespace][videoKey] %}
{% assign desktopPosterSrc = shop.metafields[desktopNamespace][posterKey] %}
{% assign desktopAspectRatio = shop.metafields[desktopNamespace][aspectRatioKey] %}
{% assign mobileVideoSrc = shop.metafields[mobileNamespace][videoKey] %}
{% assign mobilePosterSrc = shop.metafields[mobileNamespace][posterKey] %}
{% assign mobileAspectRatio = shop.metafields[mobileNamespace][aspectRatioKey] %}

{% if isLive == true %}

<style>
  .tolstoy-hero-video-container {
    width: 100%;
    display: flex;
  }

  .tolstoy-hero-video {
      width: 100%;
      {% if videoLink  %}
      cursor: pointer;
       {% endif %}
      height: auto;
  }

  @media (min-width: 575px) {
      .tolstoy-hero-video {
          aspect-ratio: {{ desktopAspectRatio }};
      }
  }

  @media (max-width: 575px) {
      .tolstoy-hero-video {
          object-fit:contain;
          aspect-ratio: {{ mobileAspectRatio }};
      }
  }
</style>

<div
  alt='tolstoy-hero-video'
  tabindex='0'
  aria-label='Tolstoy hero video button'
  class='tolstoy-hero-video-container'
  role='button'
  id='tolstoy-hero-video-container-{{ publishId }}'
>
  <video
    class='tolstoy-hero-video'
      id='tolstoy-hero-video-{{ publishId }}'
    loop
    playsinline
    aria-label='Hero Video'
    disablePictureInPicture
    disableRemotePlayback
    muted
    autoplay
    preload="auto"
  ></video>
</div>

<script>
  function startHeroVideo() {
    const publishId = '{{ publishId }}';
    const isMobile = window.innerWidth <= 450;

    if (!publishId || publishId === "publishId") {
      return;
    }

    const startVideo =()=>{
        const videoTag = document.getElementById("tolstoy-hero-video-{{ publishId }}");

        if (isMobile){
        videoTag.poster = '{{ mobilePosterSrc }}';
        videoTag.src = '{{ mobileVideoSrc }}';
        }else{
        videoTag.poster = '{{ desktopPosterSrc }}';
        videoTag.src = '{{ desktopVideoSrc }}';
        }
    }

    startVideo();

    const uuidv4 = () =>
      "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, c => {
        const r = Math.trunc(Math.random() * 16);
        const v = c === "x" ? r : (r & 0x3) | 0x8;
        return v.toString(16);
      });

    const wrapStorageAction = action => {
      try {
        return action();
      } catch (error) {
        window.tolstoyCaptureError?.(error);
        return null;
      }
    };

    const getAnonymousId = () => {
      const fromLocalStorage = wrapStorageAction(() => localStorage.getItem("tolstoy-anonymousId"));

      if (fromLocalStorage) {
        return fromLocalStorage;
      }

      const anonymousIdCookie = document.cookie.split("; ").find(c => c.startsWith("tolstoy-anonymousId"));
      const fromCookie = anonymousIdCookie ? anonymousIdCookie.split("=")[1] : "";

      if (fromCookie) {
        return fromCookie;
      }

      const anonymousId = uuidv4();
      const cookie = "tolstoy-anonymousId=" + anonymousId + "; path=/; Secure";
      const domain = new URL(window.location).host;
      wrapStorageAction(() => document.cookie = cookie + "; domain=." + domain);
      wrapStorageAction(() => document.cookie = cookie);
    }

    const createEvent = (eventName, anonymousId, sessionId) => ({
      publishId: "{{ publishId }}",
      anonymousId,
      eventName,
      isMobile: window.innerWidth <= 450,
      timestamp: new Date().toISOString(),
      parentUrl: window.location.href,
      sessionId,
      playerType: "hero",
      storeUrl: "{{ shop.permanent_domain }}"
    });

    const sendEvent = (anonymousId, sessionId) => eventName => {
      try {
        const params = createEvent(eventName, anonymousId, sessionId);
        return fetch("https://api.gotolstoy.com/events/complete-event", {
          method: "POST",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json"
          },
          body: JSON.stringify(params)
        });
      } catch (error) {
        window.tolstoyCaptureError?.(error, "Error sending page view:");
      }
    };

    const anonymousId = getAnonymousId();
    const sessionId = uuidv4();

    const sendEventWithParams = sendEvent(anonymousId, sessionId);

    const videoContainer = document.getElementById("tolstoy-hero-video-container-{{ publishId }}");
    videoContainer.addEventListener("click", async() => {
    let videoLink = '{{ videoLink }}';
    if (!videoLink){
      return
    }

   await Promise.all([sendEventWithParams("sessionStart"), sendEventWithParams("clickCta")]);
   window.open(videoLink, {% if isOpenInNewTab %}'_blank'{% else %}'_self'{% endif %});
   });
    window.addEventListener("load", () => sendEventWithParams("pageView"), { once: true });
  }

  startHeroVideo();
</script>

{% endif %}

{% schema %}
  {
    "name": "Tolstoy hero video",
    "settings": [
      {
        "type": "text",
        "id": "publishId",
        "label": "Publish id",
        "default": "publishId"
      }
    ],
    "presets": [
      {
        "name": "Tolstoy hero video",
        "category": "Tolstoy Sections"
      }
    ]
  }
{% endschema %}
